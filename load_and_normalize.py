# -*- coding: utf-8 -*-
"""load and normalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ulKdSBMnI4HtMuvEJsSXcr0YR1J8QO0K
"""

import torch
import torchvision
import torchvision.transforms as transforms

'''
The output of torchvision datasets are PILImage images of range [0, 1]. We transform them to Tensors of normalized range [-1, 1].
'''

'''
Compose - создает несколько преобразований, которые работают вместе.
ToTensor() - конвертирует PIL image или numpy 3-мерный массив(представляющий изображений) в torch.FloatTensor вида(channels, height, width)
Normalize() - нормализует входной тензор с помощью заданных среднего и стандартного отклонений: output[channel] = (input[channel] - mean[channel])/std[channel]
'''
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5),(0.5, 0.5, 0.5))])

batch_size = 4

'''
Задаём обучающий и тестирующий наборы данных

torchvision.datasets.CIFAR10 - набор данных с которым мы хотим работать
root = './data' - путь к набору данных
train = True - обозначаем, что это обучающий набор данных
download = True - даем право на установку набора данных
transform = transform - задаём параметра нормализации и стандартизации набора данных

torch.utils.data.DataLoader - метод для загрузки наборов данных
первый параметр - передаем данные о наборе который мы должны загрузить, объект типа torchvision.datasets.CIFAR10
batch_size
shuffle = True/False - нужно ли перемешивать набор данных
num_workers - обеспечивает многопроцессную загрузку данных
'''

trainset = torchvision.datasets.CIFAR10(root = './data', train = True,
                                        download = True, transform = transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size = batch_size,
                                          shuffle = True, num_workers = 2)

testset = torchvision.datasets.CIFAR10(root = './data', train = False,
                                       download = True, transform = transform)
testloader = torch.utils.data.DataLoader(testset, batch_size = batch_size,
                                         shuffle = False, num_workers = 2)

classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')


import matplotlib.pyplot as plt
import numpy as np

'''
Функция для вывода изображений
- Принимаем на вход тензор, которым представлено изображений
- Выполняем операцию обратную нормализаци
- Переводим наш тензор в numpy ndarray
- Выводим с помощью pyplot
'''

def imshow(img):
    img = img/2+0.5
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1,2,0)))
    plt.show()


# get some random training images
dataiter = iter(trainloader)
images, labels = next(dataiter)

# show images
imshow(torchvision.utils.make_grid(images))
# print labels
print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))